import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.*;
import javafx.stage.Screen;
import javafx.stage.Stage;
import lib.GT;
import lib.Matrix;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

public class Main extends Application {

    private Scene scene;
    private final int DEFAULT_SIZE = 10;
    private Matrix adjMatrix;
    private Matrix disMatrix;
    private Matrix pathMatrix;
    private Button[][] adjMatrixBtn;
    private Button[][] disMatrixBtn;
    private Button[][] pathMatrixBtn;
    private ArrayList components = new ArrayList();
    private ArrayList componentsMirror = new ArrayList();

    public void initMain(int size, Stage window){

        int labelMatrixSize = size+2;
        int phM = size+1;
        int maxSize = 17*36;
        double tileSize = maxSize/(size+2);
        int fontSize = (int)tileSize/2-5;
        adjMatrix = new Matrix(phM-1);
        FlowPane adjMatrixFrame = new FlowPane();

        adjMatrixFrame.setMaxHeight(maxSize);
        adjMatrixFrame.setMaxWidth(maxSize);

        adjMatrixFrame.setStyle("-fx-background-color:rgba(0,0,0,0);");
        adjMatrixBtn = new Button[labelMatrixSize][labelMatrixSize];

        for (int i = 0; i < adjMatrixBtn.length; i++) {
            for (int j = 0; j < adjMatrixBtn.length; j++) {

                if((i == 0) || (j == 0) || (i == phM) || (j == phM)){
                    String thisLabelChar = "";
                    if(!((i == 0) && (j == 0)) && !((i == 0 ) && (j == phM)) && !((i == phM) && (j == 0)) && !((i == phM ) && (j == phM))){
                        int c = (i == 0) || (i == phM) ? 64+j : 64+i;
                        thisLabelChar += Character.toString ((char) c);
                    }
                    adjMatrixBtn[i][j] = new Button(thisLabelChar);
                    adjMatrixBtn[i][j].setId(i+"-"+j);
                    adjMatrixBtn[i][j].setStyle("-fx-font-size: "+fontSize+"px;-fx-text-fill:#8d8d8e;");
                    adjMatrixFrame.getChildren().add(adjMatrixBtn[i][j]);
                    adjMatrixBtn[i][j].getStyleClass().add("matrixLabels");
                    adjMatrixBtn[i][j].setPrefHeight(tileSize);
                    adjMatrixBtn[i][j].setPrefWidth(tileSize);
                } else {
                    adjMatrixBtn[i][j] = new Button("0");

                    if(i == j){
                        adjMatrixBtn[i][j].getStyleClass().add("loopVertex");
                        adjMatrixBtn[i][j].setStyle("-fx-text-fill: #6f6f6f;-fx-background-color: #9cb0ce;-fx-font-size: "+fontSize+"px;");
                        adjMatrixBtn[i][j].setOnMouseEntered(t -> {
                            Button thisBtn = (Button) t.getSource();
                            hoverBtn(thisBtn.getId(), "#f27d7d", "#fff", phM, true);
                        });
                        adjMatrixBtn[i][j].setOnMouseExited(t -> {
                            Button thisBtn = (Button) t.getSource();
                            hoverBtn(thisBtn.getId(), "#9cb0ce", "#8d8d8e", phM, true);
                        });
                    } else {
                        adjMatrixBtn[i][j].getStyleClass().add("regVertex");
                        adjMatrixBtn[i][j].setStyle("-fx-text-fill: #6f6f6f;-fx-background-color: #fff;-fx-font-size: "+fontSize+"px;");
                        int thisI = i-1;
                        int thisJ = j-1;
                        adjMatrixBtn[i][j].setOnMouseClicked(t -> {
                            Button thisBtn = (Button) t.getSource();
                            //System.out.println(thisBtn.getId());
                            toggleBtn(thisBtn.getId());
                            int toggleBtnVal = Integer.parseInt(thisBtn.getText());
                            adjMatrix.setMirrorVal(thisI,thisJ,toggleBtnVal);
                            //disMatrixBtn[thisI][thisJ].setText(""+toggleBtnVal+"");
                            //disMatrixBtn[thisJ][thisI].setText(""+toggleBtnVal+"");
                            disMatrix.setMirrorVal(thisI,thisJ,toggleBtnVal);
                            //GT.printMatrix(adjMatrix);
                            calculateGraph();
                            //getComponents();
                        });
                        adjMatrixBtn[i][j].setOnMouseEntered(t -> {
                            Button thisBtn = (Button) t.getSource();
                            hoverBtn(thisBtn.getId(), "#cff2c9", "#fff", phM, false);
                        });
                        adjMatrixBtn[i][j].setOnMouseExited(t -> {
                            Button thisBtn = (Button) t.getSource();
                            hoverBtn(thisBtn.getId(), "#fff", "#8d8d8e", phM, false);
                        });
                    }
                    adjMatrixBtn[i][j].setId(i+"-"+j);
                    adjMatrixBtn[i][j].setPrefHeight(tileSize);
                    adjMatrixBtn[i][j].setPrefWidth(tileSize);
                    //adjMatrix.setMatrix(i,j,0);
                    adjMatrixFrame.getChildren().add(adjMatrixBtn[i][j]);
                }
            }
        }

        VBox topFrame = new VBox();
        topFrame.setSpacing(10);
        ChoiceBox choiceBoxSize = new ChoiceBox();
        Text choiceBoxSizeTitle = new Text("Graph IT");
        try {
            final Font f = Font.loadFont(new FileInputStream(new File("src/fonts/ag.ttf")), 12);
            choiceBoxSizeTitle.setFont(f);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        choiceBoxSizeTitle.setId("choiceBoxTitle");
        topFrame.setMargin(choiceBoxSizeTitle, new Insets(15, 5, 10, 5));
        topFrame.setMargin(choiceBoxSize, new Insets(15, 5, 5, 5));
        topFrame.setAlignment(Pos.BASELINE_CENTER);
        ObservableList list = topFrame.getChildren();
        list.addAll(choiceBoxSizeTitle, choiceBoxSize);
        choiceBoxSize.setId("choiceBoxSize");
        choiceBoxSize.getItems().addAll("3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15");
        choiceBoxSize.getSelectionModel().select(size-3);
        choiceBoxSize.getSelectionModel().selectedIndexProperty().addListener((observableValue, number, number2) -> {
            // System.out.println(choiceBoxSize.getItems().get((Integer) number2));
            int chosenSize = (Integer) number2;
            initMain(chosenSize+3,window);
        });


        int subMaxSize = 15*20;
        double subTileSize = subMaxSize/(size);
        int subFontSize = size > 9 ? 14 : (int)subTileSize/2-5;
        //int subFontSize = (int)subTileSize/2-5;

        VBox leftFrame = new VBox();
        Text leftFrameTitle = new Text("Wegmatrix");
        leftFrameTitle.getStyleClass().add("subTitle");
        pathMatrix = new Matrix(size, 20);
        FlowPane pathMatrixFrame = new FlowPane();
        leftFrame.setMargin(leftFrameTitle, new Insets(5, 0, 10, 20));
        leftFrame.setMargin(pathMatrixFrame, new Insets(0, 5, 10, 20));
        pathMatrixFrame.setMaxHeight(subMaxSize);
        pathMatrixFrame.setMaxWidth(subMaxSize);
        pathMatrixFrame.setStyle("-fx-background-color:rgba(0,0,0,0);");
        pathMatrixBtn = new Button[size][size];

        for (int i = 0; i < pathMatrixBtn.length; i++) {
            for (int j = 0; j < pathMatrixBtn.length; j++) {
                //pathMatrixBtn[i][j] = new Button("∞");
                pathMatrixBtn[i][j] = new Button("0");
                pathMatrixBtn[i][j].setId(i+"-"+j+"-p");
                pathMatrix.setMirrorVal(i,j,0);
                pathMatrixBtn[i][j].setStyle("-fx-text-fill: #6f6f6f;-fx-background-color: #fff;-fx-font-size: "+subFontSize+"px;");
                pathMatrixBtn[i][j].setPadding(Insets.EMPTY);
                pathMatrixBtn[i][j].setPrefHeight(subTileSize);
                pathMatrixBtn[i][j].setPrefWidth(subTileSize);
                if(i == j){
                    pathMatrixBtn[i][j].setText("1");
                    pathMatrix.setMirrorVal(i,j,1);
                    pathMatrixBtn[i][j].setStyle("-fx-text-fill: #000;-fx-font-size: "+subFontSize+"px;");
                    pathMatrixBtn[i][j].getStyleClass().add("loopVertex");
                } else {
                    pathMatrixBtn[i][j].getStyleClass().add("regVertex");
                }
                pathMatrixFrame.getChildren().add(pathMatrixBtn[i][j]);
            }
        }
        ObservableList leftList = leftFrame.getChildren();

        Label components = new Label("Komponenten: "+size);
        components.setWrapText(true);
        components.getStyleClass().add("assets");
        components.setId("components");
        Label bridges = new Label("Brücken: {}");
        bridges.setWrapText(true);
        bridges.setMaxWidth(300);
        bridges.getStyleClass().add("assets");
        bridges.setId("bridges");
        Label articulations = new Label("Artikulationen: {}");
        articulations.setWrapText(true);
        articulations.setMaxWidth(300);
        articulations.getStyleClass().add("assets");
        articulations.setId("articulations");
        Label connected = new Label("Zusammenhängend: nein");
        connected.setWrapText(true);
        connected.getStyleClass().add("assets");
        connected.setId("connected");

        leftFrame.setMargin(components, new Insets(15, 0, 10, 25));
        leftFrame.setMargin(bridges, new Insets(15, 0, 10, 25));
        leftFrame.setMargin(articulations, new Insets(15, 0, 10, 25));
        leftFrame.setMargin(connected, new Insets(15, 0, 10, 25));
        leftList.addAll(leftFrameTitle,
                pathMatrixFrame,
                components,
                bridges,
                articulations,
                connected
        );

        VBox rightFrame = new VBox();
        Text rightFrameTitle = new Text("Distanzmatrix");
        rightFrameTitle.getStyleClass().add("subTitle");
        disMatrix = new Matrix(size, 20);
        FlowPane disMatrixFrame = new FlowPane();
        rightFrame.setMargin(rightFrameTitle, new Insets(5, 0, 10, 0));
        rightFrame.setMargin(disMatrixFrame, new Insets(0, 20, 10, 0));
        disMatrixFrame.setMaxHeight(subMaxSize);
        disMatrixFrame.setMaxWidth(subMaxSize);
        disMatrixFrame.setStyle("-fx-background-color:rgba(0,0,0,0);");
        disMatrixBtn = new Button[size][size];

        for (int i = 0; i < disMatrixBtn.length; i++) {
            for (int j = 0; j < disMatrixBtn.length; j++) {
                disMatrixBtn[i][j] = new Button("∞");
                disMatrixBtn[i][j].setStyle("-fx-text-fill: #6f6f6f;-fx-font-size: "+subFontSize+"px;");
                disMatrixBtn[i][j].setPadding(Insets.EMPTY);
                disMatrixBtn[i][j].setPrefHeight(subTileSize);
                disMatrixBtn[i][j].setPrefWidth(subTileSize);
                if(i == j){
                    disMatrixBtn[i][j].setText("0");
                    disMatrixBtn[i][j].setStyle("-fx-text-fill: #000;-fx-font-size: "+subFontSize+"px;");
                    disMatrixBtn[i][j].getStyleClass().add("loopVertex");
                } else {
                    disMatrixBtn[i][j].getStyleClass().add("regVertex");
                }
                disMatrix.setVal(i,j,0);
                disMatrixFrame.getChildren().add(disMatrixBtn[i][j]);
            }
        }

        ObservableList rightList = rightFrame.getChildren();
        //leftFrame.setAlignment(Pos.CENTER_LEFT);
        //leftFrame.setAlignment(Pos.BASELINE_CENTER);
        Label radius = new Label("Radius: n/a");
        radius.getStyleClass().add("assets");
        radius.setId("radius");
        Label diam = new Label("Durchmesser: n/a");
        diam.getStyleClass().add("assets");
        diam.setId("diam");
        Label center = new Label("Zentrum: n/a");
        center.getStyleClass().add("assets");
        center.setId("center");




        rightFrame.setMargin(radius, new Insets(15, 0, 10, 5));
        rightFrame.setMargin(diam, new Insets(15, 0, 10, 5));
        rightFrame.setMargin(center, new Insets(15, 0, 10, 5));

        rightList.addAll(rightFrameTitle,
                disMatrixFrame,
                radius,
                diam,
                center
        );

        Text footer = new Text("");
        BorderPane.setAlignment(footer,Pos.BOTTOM_CENTER);
        /*
        Text text1 = new Text("Big italic red text");
        text1.setFill(Color.RED);
        text1.setFont(Font.font("Helvetica", FontPosture.ITALIC, 40));
        Text text2 = new Text(" little bold blue text");
        text2.setFill(Color.BLUE);
        text2.setFont(Font.font("Helvetica", FontWeight.BOLD, 10));
        TextFlow textFlow = new TextFlow(text1, text2);
        */

        /*
         *  SET ROOT
         */

        BorderPane root = new BorderPane(adjMatrixFrame, topFrame, rightFrame, footer, leftFrame);
        // root.setPrefSize(1280, 720);
        window.setMaximized(true);
        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
        root.setPrefSize(screenBounds.getWidth(), screenBounds.getHeight());
        root.getStyleClass().add("root");
        // window.setFullScreen(true);
        scene = new Scene(root);
        scene.getStylesheets().add(getClass().getResource("css/generic.css").toExternalForm());
        window.setScene(scene);
    }

    @Override
    public void start(Stage window) throws Exception {
        initMain(DEFAULT_SIZE,window);
        window.setTitle("GraphIT");
        window.show();
        window.setMinWidth(window.getWidth());
        window.setMinHeight(window.getHeight());
    }

    public static void main(String[] args) { launch(args); }

    public void hoverBtn(String id, String color, String colorLabel, int size, boolean disabledBtn){
        String[] data = id.split("-");
        int valA = Integer.parseInt(data[0]);
        int valB = Integer.parseInt(data[1]);

        //Button labelBtn = (Button) scene.lookup("#"+valB+"-0");
        Button labelBtn = adjMatrixBtn[valB][0];
        String thisStyle = colorLabel.equals("#8d8d8e") ? labelBtn.getStyle().replace("#fff", "#8d8d8e"): labelBtn.getStyle().replace("#8d8d8e", "#fff");
        adjMatrixBtn[valB][0].setStyle(thisStyle);
        adjMatrixBtn[0][valB].setStyle(thisStyle);
        adjMatrixBtn[0][valA].setStyle(thisStyle);
        adjMatrixBtn[valA][0].setStyle(thisStyle);

        adjMatrixBtn[valB][size].setStyle(thisStyle);
        adjMatrixBtn[size][valB].setStyle(thisStyle);
        adjMatrixBtn[size][valA].setStyle(thisStyle);
        adjMatrixBtn[valA][size].setStyle(thisStyle);

        if(!disabledBtn){
            thisStyle = color.equals("#fff") ? adjMatrixBtn[valB][valA].getStyle().replace("#cff2c9", "#fff"):adjMatrixBtn[valB][valA].getStyle().replace("#fff", "#cff2c9");
            adjMatrixBtn[valB][valA].setStyle(thisStyle);
            adjMatrixBtn[valA][valB].setStyle(thisStyle);
        } else {
            thisStyle = color.equals("#9cb0ce") ? adjMatrixBtn[valA][valB].getStyle().replace("#f27d7d", "#9cb0ce"):adjMatrixBtn[valA][valB].getStyle().replace("#9cb0ce", "#f27d7d");
            adjMatrixBtn[valA][valB].setStyle(thisStyle);
        }
    }

    public void toggleBtn(String id){
        String[] data = id.split("-");
        int valA = Integer.parseInt(data[0]);
        int valB = Integer.parseInt(data[1]);
        Button toggleBtn = (Button) scene.lookup("#"+id);
        int toggleBtnVal = Integer.parseInt(toggleBtn.getText());
        toggleBtnVal ^= 1;
        String activeBtnColor;
        if(toggleBtnVal == 1){
            activeBtnColor = toggleBtn.getStyle().replace("#6f6f6f", "#000"); // font color
            activeBtnColor = activeBtnColor.replace("#cff2c9", "#d8d8d8"); // bg color
        } else {
            activeBtnColor = toggleBtn.getStyle().replace("#000", "#6f6f6f");
            activeBtnColor = activeBtnColor.replace("#d8d8d8", "#cff2c9");
        }
        toggleBtn.setStyle(activeBtnColor);
        toggleBtn.setText(""+toggleBtnVal+"");
        toggleBtn = (Button) scene.lookup("#"+valB+"-"+valA);
        toggleBtn.setStyle(activeBtnColor);
        toggleBtn.setText(""+toggleBtnVal+"");
    }

    public void getComponents(){
        /*
         * when matrix init, create list of vertices
         * check first vertex for connected components with bfs
         * if vertices connected remove them from list
         * when bfs done, components++
         * start over with new vertex from list
         *
         * Distanzmatrix -> adjMatrix potenzieren
         * wenn in distanzmatrix unendlich und in wegmatrix = 1
         * dann wert von potenzierter matrix eintragen
         * solange wiederholen(potenzieren und eintragen) bis alle
         * einser Werte der Wegmatrix einen Wert in der Distanzmatrix haben
         */

        this.components.clear();
        this.componentsMirror.clear();
        int[][] thisAdjMatrix = this.adjMatrix.getMatrix();
        boolean[] checked = new boolean[thisAdjMatrix.length];
        Queue<Integer> queue = new LinkedList<>();
        for (int o = 0; o < checked.length; o++) {
            if(!checked[o]){
                queue.add(o);
                int g = 65+o;
                String thisComponent = Character.toString ((char) g);
                ArrayList<Integer> thisMirrorComponent = new ArrayList<>();
                thisMirrorComponent.add(o);
                while (!queue.isEmpty()) {
                    int current = queue.peek(); // get first element of queue
                    queue.remove(current);
                    checked[current] = true;
                    // check matrix row given by current(popped from queue)
                    for (int i = 0; i < thisAdjMatrix.length; i++) {
                        if((thisAdjMatrix[current][i] == 1) && (!checked[i])){
                            int c = 65+i;
                            thisComponent += ", "+Character.toString ((char) c);
                            thisMirrorComponent.add(i);
                            checked[i] = true;
                            queue.add(i);

                        }
                    }
                }
                this.components.add(thisComponent);
                this.componentsMirror.add(thisMirrorComponent);
            }
        }
    }

    public void updatePathMatrix(){
        clearPathMatrix();
        for (int p = 0; p < this.componentsMirror.size(); p++) {
            ArrayList<Integer> list = (ArrayList<Integer>) this.componentsMirror.get(p);
            for (int i = 0; i < list.toArray().length; i++) {
                for (int j = 0; j < list.toArray().length; j++) {
                    int thisI = (int) list.toArray()[i];
                    int thisJ = (int) list.toArray()[j];
                    pathMatrix.setVal(thisI,thisJ,1);
                    pathMatrixBtn[thisI][thisJ].setText("1");
                    pathMatrixBtn[thisI][thisJ].setStyle(pathMatrixBtn[thisI][thisJ].getStyle().replace("#6f6f6f", "#000"));
                    pathMatrixBtn[thisI][thisJ].setStyle(pathMatrixBtn[thisI][thisJ].getStyle().replace("#fff", "#d8d8d8"));
                }
            }
        }
    }

    public void printComponents(){
        System.out.println(this.components.size());
        for (int i = 0; i < this.components.size(); i++) {
            System.out.println(this.components.get(i));
        }
    }

    public void clearPathMatrix(){
        for (int i = 0; i < pathMatrix.getMatrix().length; i++) {
            for (int j = 0; j < pathMatrix.getMatrix().length; j++) {
                if(i != j){
                    pathMatrix.setVal(i,j,0);
                    pathMatrixBtn[i][j].setText("0");
                    pathMatrixBtn[i][j].setStyle(pathMatrixBtn[i][j].getStyle().replace("#000", "#6f6f6f"));
                    pathMatrixBtn[i][j].setStyle(pathMatrixBtn[i][j].getStyle().replace("#d8d8d8", "#fff"));
                }
            }
        }
    }

    public void clearDisMatrix(){
        for (int i = 0; i < disMatrix.getMatrix().length; i++) {
            for (int j = 0; j < disMatrix.getMatrix().length; j++) {
                if(i != j){
                    disMatrixBtn[i][j].setText("∞");
                    disMatrixBtn[i][j].setStyle(disMatrixBtn[i][j].getStyle().replace("#000", "#6f6f6f"));
                    disMatrixBtn[i][j].setStyle(disMatrixBtn[i][j].getStyle().replace("#d8d8d8", "#fff"));
                } else {
                    disMatrixBtn[i][j].setText("0");
                }
                disMatrix.setVal(i,j,0);
            }
        }
    }
    public void printMatrix(Matrix matrix){

        int[][] thisMatrix = matrix.getMatrix();

        for (int i = 0; i < thisMatrix.length; i++) {
            for (int j = 0; j < thisMatrix.length; j++) {
                System.out.print(thisMatrix[i][j]+" ");
            }
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void updateDisMatrix(){
        clearDisMatrix();

        int[][] thisDisMatrix = disMatrix.getMatrix();
        Matrix tmpMatrix = adjMatrix;
        int[][] thisTmpMatrix = tmpMatrix.getMatrix();
        int[][] thisPathMatrix = pathMatrix.getMatrix();
        boolean nothingChanged = true;
        int pow = 1;
        while(true){
            for (int i = 0; i < thisTmpMatrix.length; i++) {
                for (int j = 0; j < thisTmpMatrix.length; j++) {
                    if ((thisDisMatrix[i][j] == 0) && (thisTmpMatrix[i][j] > 0) && (thisPathMatrix[i][j] == 1) && (i != j)) {
                        thisDisMatrix[i][j] = pow;
                        disMatrixBtn[i][j].setText(""+pow+"");
                        nothingChanged = false;
                    }
                }
            }
            if(nothingChanged){
                //System.out.println("Nothing changed");
                break;
            } else {
                tmpMatrix = GT.powMatrices(tmpMatrix,adjMatrix);
                thisTmpMatrix = tmpMatrix.getMatrix();
                nothingChanged = true;
                pow++;
            }
        }
    }

    public void getGraphEccentricities(){
        int[][] thisDisMatrix = disMatrix.getMatrix();
        for (int i = 0; i < thisDisMatrix.length; i++) {
            int rowEcc = 0;
            for (int j = 0; j < thisDisMatrix.length; j++) {
                if(thisDisMatrix[i][j] > rowEcc){
                    rowEcc = thisDisMatrix[i][j];
                }
            }
            adjMatrix.setEccentricities(i,rowEcc);
        }
        //printMatrix(disMatrix);
    }

    public void updateGraphAssets(){
        int[] eccList = adjMatrix.getEccentricities();
        int radius = eccList[0];
        int diam = eccList[0];
        for (int i = 1; i < eccList.length; i++) {
            if(eccList[i] < radius){
                radius = eccList[i];
            }
            if(eccList[i] > diam){
                diam = eccList[i];
            }
        }
        adjMatrix.setRadius(radius);
        adjMatrix.setDiameter(diam);
        String center = "";
        for (int i = 0; i < eccList.length; i++) {
            if(eccList[i] == radius){
                int c = 65+i;
                center += Character.toString ((char) c)+", ";
            }
        }
        adjMatrix.setCenter(center.substring(0, center.length() - 2));
    }


    public void calculateGraph(){

        getComponents();
        updatePathMatrix();
        updateDisMatrix();

        //printComponents();
        Label compText = (Label) scene.lookup("#components");
        int componentsTotal = this.components.size();
        compText.setText("Komponenten: "+this.components.size());
        Label connected = (Label) scene.lookup("#connected");
        String graphConnected = componentsTotal > 1 ? "nein":"ja";
        connected.setText("Zusammenhängend: "+graphConnected);

        if(this.components.size() == 1){
            getGraphEccentricities();
            updateGraphAssets();
            Label radius = (Label) scene.lookup("#radius");
            radius.setText("Radius: "+adjMatrix.getRadius());
            Label diam = (Label) scene.lookup("#diam");
            diam.setText("Durchmesser: "+adjMatrix.getDiameter());
            Label center = (Label) scene.lookup("#center");
            center.setText("Zentrum: {"+adjMatrix.getCenter()+"}");
            //System.out.println(Arrays.toString(adjMatrix.getEccentricities()));
            //printMatrix(disMatrix);
        } else {
            Label radius = (Label) scene.lookup("#radius");
            radius.setText("Radius: n/a");
            Label diam = (Label) scene.lookup("#diam");
            diam.setText("Durchmesser: n/a");
            Label center = (Label) scene.lookup("#center");
            center.setText("Zentrum: n/a");
        }

        calcCutVertices();
        //printComponents();

        //this.adjMatrix.getCutVertices();
        System.out.println(this.adjMatrix.getEndVerticesChar());
        System.out.println(this.adjMatrix.getCutVerticesChar());

    }


    public int[][] copyMatrix(int[][] matrix){
        int[][] outMatrix = new int[matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                outMatrix[i][j] = matrix[i][j];
            }
        }
        return outMatrix;
    }

    public void calcCutVertices(){
        // Artikulationen
        // einen Knoten rausnehmen, Komponenten zaehlen
        // wenn 2 Komponenten mehr, Knoten war eine Artikulation
        // rausnehmen heisst alle Kanten entfernen
        // am besten mit backup Matrix arbeiten

        // Bruecken
        // Endknoten sind Knoten mit nur einer Kante
        // Aller Artikulationen und Endknoten verbindungen

        // for loop fuer jeden Knoten
        // for loop fuer alle Kanten des Knoten
        // wenn Kanten ueber eins, alle Kanten entfernen und Artikulation checken
        // wenn eine Kante, = Endknoten
        // wenn keine Kante, ueberspringen


        //kopie der adj matrix machen -> backup matrix
        //mit der originalen adj arbeiten
        // wenn fertig, originale wieder mit backup herstellen


        this.adjMatrix.clearCutVertices();
        this.adjMatrix.clearCutVerticesChar();

        this.adjMatrix.clearEndVertices();
        this.adjMatrix.clearEndVerticesChar();

        Matrix CopyMatrix = new Matrix(adjMatrix.getVertices());
        CopyMatrix.setFullMatrix(copyMatrix(adjMatrix.getMatrix()));
        int[][] thisAdjCopy = CopyMatrix.getMatrix();
        //printMatrix(CopyMatrix);
        //String endVertices = "";
        //String cutVertices = "";

        int componentCount = this.components.size();
        //System.out.println("c_start_"+componentCount);

        int edgeCount = 0;

        for (int i = 0; i < thisAdjCopy.length; i++) {
            for (int j = 0; j < thisAdjCopy.length; j++) {
                if(thisAdjCopy[i][j] == 1){
                    edgeCount++;
                }
            }
            // for each row
            //int c = 65+i;
            //String l = Character.toString ((char) c);
            if(edgeCount == 1){
                //endVertices += " "+l;
                this.adjMatrix.setEndVertices(i);
                //System.out.println("Endknoten: "+l);
            } else if(edgeCount > 1){
                // set row to 0, detach Vertex
                for (int q = 0; q < thisAdjCopy.length; q++) {
                    thisAdjCopy[i][q] = 0;
                    thisAdjCopy[q][i] = 0; // added
                }
                //System.out.println("c_now_"+componentCount);
                int newComponentCount = getComponentCount(thisAdjCopy); //must work with right matrix
                //System.out.println("c_after_"+newComponentCount);
                if(newComponentCount-componentCount > 1){ // 0
                    //cutVertices += " "+l;
                    this.adjMatrix.setCutVertices(i);
                    //System.out.println("Artikulation: "+l);
                }
                // set row to adjMatrix value, repair Vertex
                for (int q = 0; q < thisAdjCopy.length; q++) {
                    thisAdjCopy[i][q] = adjMatrix.getValue(i,q);
                    thisAdjCopy[q][i] = adjMatrix.getValue(i,q); //added
                }
            }
            //CopyMatrix.setFullMatrix(copyMatrix(adjMatrix.getMatrix()));
            //thisAdjCopy = CopyMatrix.getMatrix();
            edgeCount = 0;
        }
        //System.out.println("Endknoten: "+endVertices);
        //System.out.println("Artikulation: "+cutVertices+"\n");
        //this.adjMatrix.setCutVertices();
    }


    public int getComponentCount(int[][] thisMatrix){

        ArrayList outerComponentList = new ArrayList();
        int[][] thisWorkingMatrix = thisMatrix;
        boolean[] checked = new boolean[thisWorkingMatrix.length];
        Queue<Integer> queue = new LinkedList<>();
        for (int o = 0; o < checked.length; o++) {
            if(!checked[o]){
                queue.add(o);
                ArrayList<Integer> innerComponentList = new ArrayList<>();
                innerComponentList.add(o);
                while (!queue.isEmpty()) {
                    int current = queue.peek(); // get first element of queue
                    queue.remove(current);
                    checked[current] = true;
                    // check matrix row given by current(popped from queue)
                    for (int i = 0; i < thisWorkingMatrix.length; i++) {
                        if((thisWorkingMatrix[current][i] == 1) && (!checked[i])){
                            innerComponentList.add(i);
                            checked[i] = true;
                            queue.add(i);

                        }
                    }
                }
                outerComponentList.add(innerComponentList);
            }
        }

        //print components
/*        System.out.println(outerComponentList.size());
        for (int i = 0; i < outerComponentList.size(); i++) {
            System.out.println(outerComponentList.get(i));
        }*/
        //System.out.println(outerComponentList);
        //print components

        return outerComponentList.size();
    }








}
